This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: app, components, context, lib, models, config
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/add-address/page.jsx
app/all-products/page.jsx
app/api/cart/get/route.js
app/api/cart/update/route.js
app/api/category/add/route.js
app/api/category/list/route.js
app/api/inngest/route.js
app/api/order/create/route.js
app/api/order/list/route.js
app/api/order/seller-orders/route.js
app/api/product/add/route.js
app/api/product/delete/route.js
app/api/product/edit/route.js
app/api/product/list/route.js
app/api/product/seller-list/route.js
app/api/user/add-address/route.js
app/api/user/data/route.js
app/api/user/get-address/route.js
app/cart/page.jsx
app/globals.css
app/layout.js
app/my-orders/page.jsx
app/order-placed/page.jsx
app/page.jsx
app/product/[id]/page.jsx
app/seller/layout.jsx
app/seller/orders/page.jsx
app/seller/page.jsx
app/seller/product-list/page.jsx
components/Banner.jsx
components/FeaturedProduct.jsx
components/Footer.jsx
components/HeaderSlider.jsx
components/HomeProducts.jsx
components/Loading.jsx
components/Navbar.jsx
components/NewsLetter.jsx
components/OrderSummary.jsx
components/ProductCard.jsx
components/seller/EditProductModal.jsx
components/seller/Footer.jsx
components/seller/Navbar.jsx
components/seller/Sidebar.jsx
config/db.js
config/inngest.js
context/AppContext.jsx
lib/authSeller.js
models/Address.js
models/Category.js
models/Order.js
models/Product.js
models/User.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/api/category/add/route.js">
// app/api/category/add/route.js
import connectDB from '@/config/db';
import Category from '@/models/Category';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function POST(request) {
	const { userId } = getAuth(request);
	if (!userId)
		return NextResponse.json(
			{ success: false, message: 'Unauthorized' },
			{ status: 401 }
		);

	const { name } = await request.json();
	if (!name)
		return NextResponse.json(
			{ success: false, message: 'Name is required' },
			{ status: 400 }
		);

	await connectDB();
	const existing = await Category.findOne({ name });
	if (existing)
		return NextResponse.json({
			success: false,
			message: 'Category already exists',
		});

	const newCategory = await Category.create({ name });
	return NextResponse.json({ success: true, category: newCategory });
}
</file>

<file path="app/api/category/list/route.js">
// app/api/category/list/route.js
import connectDB from '@/config/db';
import Category from '@/models/Category';
import { NextResponse } from 'next/server';

export async function GET() {
	await connectDB();
	const categories = await Category.find().sort({ name: 1 });
	return NextResponse.json({ success: true, categories });
}
</file>

<file path="app/api/product/delete/route.js">
import connectDB from '@/config/db';
import authSeller from '@/lib/authSeller';
import Product from '@/models/Product';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function DELETE(request) {
	try {
		const { userId } = getAuth(request);
		const isSeller = await authSeller(userId);

		if (!isSeller) {
			return NextResponse.json(
				{
					success: false,
					message: 'You are not a seller',
				},
				{ status: 403 }
			);
		}

		const { productId } = await request.json();
		if (!productId) {
			return NextResponse.json(
				{
					success: false,
					message: 'Product ID is required',
				},
				{ status: 400 }
			);
		}

		await connectDB();

		const deletedProduct = await Product.findOneAndDelete({
			_id: productId,
			userId, // ensures only the seller can delete their own product
		});

		if (!deletedProduct) {
			return NextResponse.json(
				{
					success: false,
					message: 'Product not found or not authorized',
				},
				{ status: 404 }
			);
		}

		return NextResponse.json({
			success: true,
			message: 'Product deleted successfully',
		});
	} catch (error) {
		console.error(error);
		return NextResponse.json(
			{
				success: false,
				message: error.message,
			},
			{ status: 500 }
		);
	}
}
</file>

<file path="app/api/product/edit/route.js">
import connectDB from '@/config/db';
import authSeller from '@/lib/authSeller';
import Product from '@/models/Product';
import { getAuth } from '@clerk/nextjs/server';
import { v2 as cloudinary } from 'cloudinary';
import { NextResponse } from 'next/server';

cloudinary.config({
	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
	api_key: process.env.CLOUDINARY_API_KEY,
	api_secret: process.env.CLOUDINARY_API_SECRET,
});

export async function PUT(request) {
	try {
		const { userId } = getAuth(request);
		const isSeller = await authSeller(userId);
		if (!isSeller) {
			return NextResponse.json(
				{
					success: false,
					message: 'You are not a seller',
				},
				{ status: 403 }
			);
		}

		const formData = await request.formData();

		const productId = formData.get('productId');
		if (!productId) {
			return NextResponse.json(
				{
					success: false,
					message: 'Product ID is required',
				},
				{ status: 400 }
			);
		}

		const name = formData.get('name');
		const description = formData.get('description');
		const categories = formData.get('categories');
		const price = formData.get('price');
		const offerPrice = formData.get('offerPrice');
		const options = formData.get('options'); // Get options data

		const existingImageUrls = formData.getAll('existingImages'); // URLs of images to keep
		const newImageFiles = formData.getAll('newImages'); // newly uploaded files

		await connectDB();

		const productToUpdate = await Product.findOne({ _id: productId, userId });
		if (!productToUpdate) {
			return NextResponse.json(
				{
					success: false,
					message: 'Product not found or not authorized',
				},
				{ status: 404 }
			);
		}

		// Determine images to delete from Cloudinary
		const imagesToDelete = productToUpdate.image.filter(
			imgUrl => !existingImageUrls.includes(imgUrl)
		);

		// Delete images from Cloudinary
		await Promise.all(
			imagesToDelete.map(async imgUrl => {
				const publicId = imgUrl.split('/').pop().split('.')[0]; // Extract public ID from URL
				await cloudinary.uploader.destroy(publicId);
			})
		);

		// Upload new images to Cloudinary
		let uploadedNewImageUrls = [];
		if (newImageFiles && newImageFiles.length > 0) {
			const uploadResults = await Promise.all(
				newImageFiles.map(async file => {
					const arrayBuffer = await file.arrayBuffer();
					const buffer = Buffer.from(arrayBuffer);

					return new Promise((resolve, reject) => {
						const stream = cloudinary.uploader.upload_stream(
							{ resource_type: 'auto' },
							(error, result) => {
								if (error) reject(error);
								else resolve(result);
							}
						);
						stream.end(buffer);
					});
				})
			);
			uploadedNewImageUrls = uploadResults.map(res => res.secure_url);
		}

		// Combine existing images (that were kept) with newly uploaded images
		const finalImageUrls = [...existingImageUrls, ...uploadedNewImageUrls];

		const updatedProduct = await Product.findOneAndUpdate(
			{ _id: productId, userId }, // ensure only the seller can edit
			{
				...(name && { name }),
				...(description && { description }),
				...(categories && {
					categories: categories.split(',').map(item => item.trim()),
				}),
				...(price && { price: Number(price) }),
				...(offerPrice && { offerPrice: Number(offerPrice) }),
				// Parse and add options if provided
				...(options && { options: JSON.parse(options) }),
				image: finalImageUrls, // Update with the combined image array
			},
			{ new: true }
		);

		if (!updatedProduct) {
			return NextResponse.json(
				{
					success: false,
					message: 'Product not found or not authorized',
				},
				{ status: 404 }
			);
		}

		return NextResponse.json({
			success: true,
			message: 'Product updated successfully',
			updatedProduct,
		});
	} catch (error) {
		console.error(error);
		return NextResponse.json(
			{
				success: false,
				message: error.message,
			},
			{ status: 500 }
		);
	}
}
</file>

<file path="components/seller/EditProductModal.jsx">
'use client';
'use client';
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { useAppContext } from '@/context/AppContext'; // Import AppContext
// import Image from 'next/image'; // Temporarily remove next/image for debugging

const EditProductModal = ({ product, isOpen, onClose, getToken, onUpdate }) => {
	const { allCategories, setAllCategories } = useAppContext(); // Get allCategories from AppContext

	const [name, setName] = useState(product.name);
	const [description, setDescription] = useState(product.description);
	// Initialize selectedCategories with product's categories
	const [selectedCategories, setSelectedCategories] = useState(
		product.categories || []
	);
	const [price, setPrice] = useState(product.price);
	const [offerPrice, setOfferPrice] = useState(product.offerPrice);
	const [existingImages, setExistingImages] = useState(product.image || []); // State for existing images
	const [newImages, setNewImages] = useState([]); // State for newly selected images
	const [submitting, setSubmitting] = useState(false);
	const [newCategoryName, setNewCategoryName] = useState(''); // State for new category input
	const [options, setOptions] = useState(product.options || []); // State for product options: [{ name: 'Size', values: ['S', 'M'] }]

	if (!isOpen) return null;

	// Function to add a new category to the global list and select it for the product
	const handleAddNewCategory = async () => {
		const trimmedCategoryName = newCategoryName.trim();
		if (!trimmedCategoryName) {
			toast.error('Category name cannot be empty.');
			return;
		}

		// Prevent adding duplicate categories to the global list
		if (
			allCategories.some(
				cat => cat.toLowerCase() === trimmedCategoryName.toLowerCase()
			)
		) {
			toast.error('Category already exists globally.');
			setNewCategoryName('');
			return;
		}

		// Prevent adding duplicate categories to the product's selected list
		if (
			selectedCategories.some(
				cat => cat.toLowerCase() === trimmedCategoryName.toLowerCase()
			)
		) {
			toast.error('Category already selected for this product.');
			setNewCategoryName('');
			return;
		}

		try {
			const token = await getToken();
			const { data } = await axios.post(
				'/api/category/add',
				{ name: trimmedCategoryName },
				{ headers: { Authorization: `Bearer ${token}` } }
			);

			if (data.success) {
				toast.success(`Category '${trimmedCategoryName}' added.`);
				// Update global categories in AppContext
				setAllCategories(prev => [...prev, data.category.name]);
				// Select the newly added category for the product
				setSelectedCategories(prev => [...prev, data.category.name]);
				setNewCategoryName('');
			} else {
				toast.error(data.message);
			}
		} catch (err) {
			toast.error(err.message || 'Failed to add category.');
		}
	};

	// Function to remove a category from the product's selected categories
	const handleRemoveSelectedCategory = categoryToRemove => {
		setSelectedCategories(prev => prev.filter(cat => cat !== categoryToRemove));
	};

	// Function to toggle selection of an existing category from the global list
	const handleToggleExistingCategory = categoryToToggle => {
		if (selectedCategories.includes(categoryToToggle)) {
			handleRemoveSelectedCategory(categoryToToggle);
		} else {
			setSelectedCategories(prev => [...prev, categoryToToggle]);
		}
	};

	const handleSubmit = async e => {
		e.preventDefault();
		setSubmitting(true);
		try {
			const token = await getToken();
			const formData = new FormData();
			formData.append('productId', product._id);
			formData.append('name', name);
			formData.append('description', description);
			// Join selected categories into a comma-separated string for the backend
			formData.append('categories', selectedCategories.join(','));
			formData.append('price', price);
			formData.append('offerPrice', offerPrice);
			// Append existing images to keep
			existingImages.forEach(img => formData.append('existingImages', img));
			// Append newly selected images
			newImages.forEach(img => formData.append('newImages', img));
			// Append options as a JSON string
			formData.append('options', JSON.stringify(options));

			const { data } = await axios.put('/api/product/edit', formData, {
				headers: { Authorization: `Bearer ${token}` },
			});

			if (data.success) {
				toast.success('Product updated successfully');
				onUpdate(data.updatedProduct);
				onClose();
			} else {
				toast.error(data.message);
			}
		} catch (err) {
			toast.error(err.message);
		} finally {
			setSubmitting(false);
		}
	};

	return (
		<div className='fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4'>
			<div className='bg-white rounded-lg shadow-lg max-w-md w-full max-h-[90vh] overflow-y-auto p-6'>
				<h2 className='text-lg font-bold mb-4'>Edit Product</h2>
				<form className='flex flex-col gap-3' onSubmit={handleSubmit}>
					<input
						type='text'
						value={name}
						onChange={e => setName(e.target.value)}
						placeholder='Product Name'
						className='border px-3 py-2 rounded w-full'
					/>
					<textarea
						value={description}
						onChange={e => setDescription(e.target.value)}
						placeholder='Description'
						className='border px-3 py-2 rounded w-full'
						rows='3'
					/>

					{/* Category Management Section */}
					<div className='border p-3 rounded'>
						<label className='block text-sm font-medium text-gray-700 mb-2'>
							Categories
						</label>
						{/* Selected Categories Tags */}
						<div className='flex flex-wrap gap-2 mb-3'>
							{selectedCategories.map(cat => (
								<span
									key={cat}
									className='flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full'
								>
									{cat}
									<button
										type='button'
										onClick={() => handleRemoveSelectedCategory(cat)}
										className='ml-1 text-blue-800 hover:text-blue-900 focus:outline-none'
									>
										&times;
									</button>
								</span>
							))}
						</div>

						{/* Add New Category Input */}
						<div className='flex gap-2 mb-3'>
							<input
								type='text'
								value={newCategoryName}
								onChange={e => setNewCategoryName(e.target.value)}
								onKeyPress={e => {
									if (e.key === 'Enter') {
										e.preventDefault(); // Prevent form submission
										handleAddNewCategory();
									}
								}}
								placeholder='Add new category'
								className='border px-3 py-2 rounded w-full'
							/>
							<button
								type='button'
								onClick={handleAddNewCategory}
								className='px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700'
							>
								Add
							</button>
						</div>

						{/* Existing Categories as Clickable Buttons */}
						<div className='flex flex-wrap gap-2'>
							{allCategories
								.filter(cat => !selectedCategories.includes(cat)) // Filter out already selected categories
								.map(cat => (
									<button
										key={cat}
										type='button'
										onClick={() => handleToggleExistingCategory(cat)}
										className='px-3 py-1 rounded-full border border-gray-300 text-gray-700 hover:bg-gray-100 text-sm'
									>
										{cat}
									</button>
								))}
						</div>
					</div>

					<input
						type='number'
						value={price}
						onChange={e => setPrice(e.target.value)}
						placeholder='Price'
						className='border px-3 py-2 rounded w-full'
					/>
					<input
						type='number'
						value={offerPrice}
						onChange={e => setOfferPrice(e.target.value)}
						placeholder='Offer Price'
						className='border px-3 py-2 rounded w-full'
					/>
					<label className='block text-sm font-medium text-gray-700 mt-2'>
						Product Images (optional)
					</label>
					<label className='block text-sm font-medium text-gray-700 mt-2'>
						Product Images
					</label>
					{/* Display existing images */}
					<div className='flex flex-wrap gap-2 mb-3'>
						{existingImages.map((img, index) =>
							// Ensure img is a valid string URL before rendering
							typeof img === 'string' && img ? (
								<div
									key={index}
									className='relative w-24 h-24 border rounded overflow-hidden'
								>
									<img
										src={img}
										alt={`Product Image ${index}`}
										className='w-full h-full object-cover' // Use Tailwind for object-fit
									/>
									<button
										type='button'
										onClick={() =>
											setExistingImages(prev =>
												prev.filter((_, i) => i !== index)
											)
										}
										className='absolute top-0 right-0 bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs'
									>
										&times;
									</button>
								</div>
							) : null
						)}
						{/* Display newly selected images */}
						{newImages.map((img, index) =>
							// Ensure img is a File object before creating URL, provide fallback for src
							img instanceof File ? (
								<div
									key={index}
									className='relative w-24 h-24 border rounded overflow-hidden'
								>
									<img
										src={img instanceof File ? URL.createObjectURL(img) : ''} // Added fallback
										alt={`New Image ${index}`}
										className='w-full h-full object-cover' // Use Tailwind for object-fit
									/>
									<button
										type='button'
										onClick={() =>
											setNewImages(prev => prev.filter((_, i) => i !== index))
										}
										className='absolute top-0 right-0 bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs'
									>
										&times;
									</button>
								</div>
							) : null
						)}
					</div>

					{/* Product Options Management Section */}
					<div className='border p-3 rounded'>
						<label className='block text-base font-medium text-gray-700 mb-2'>
							Product Options (e.g., Size, Color)
						</label>
						{options.map((option, optionIndex) => (
							<div
								key={optionIndex}
								className='flex flex-col gap-2 mb-3 p-2 border rounded'
							>
								<div className='flex items-center justify-between'>
									<input
										type='text'
										placeholder='Option Name (e.g., Size)'
										value={option.name}
										onChange={e => {
											const newOptions = [...options];
											newOptions[optionIndex].name = e.target.value;
											setOptions(newOptions);
										}}
										className='border px-3 py-2 rounded w-full mr-2'
									/>
									<button
										type='button'
										onClick={() =>
											setOptions(prev =>
												prev.filter((_, i) => i !== optionIndex)
											)
										}
										className='bg-red-600 text-white rounded px-3 py-2 hover:bg-red-700'
									>
										Remove Option
									</button>
								</div>
								<div className='flex flex-wrap gap-2 items-center'>
									{option.values.map((value, valueIndex) => (
										<span
											key={valueIndex}
											className='flex items-center bg-gray-100 text-gray-800 text-sm font-medium px-2.5 py-0.5 rounded-full'
										>
											{value}
											<button
												type='button'
												onClick={() => {
													const newOptions = [...options];
													newOptions[optionIndex].values = newOptions[
														optionIndex
													].values.filter((_, i) => i !== valueIndex);
													setOptions(newOptions);
												}}
												className='ml-1 text-gray-800 hover:text-gray-900 focus:outline-none'
											>
												&times;
											</button>
										</span>
									))}
									<input
										type='text'
										placeholder='Add value (comma-separated)'
										onKeyPress={e => {
											if (e.key === 'Enter') {
												e.preventDefault();
												const newValues = e.target.value
													.split(',')
													.map(v => v.trim())
													.filter(v => v !== '');
												if (newValues.length > 0) {
													const newOptions = [...options];
													newOptions[optionIndex].values = [
														...newOptions[optionIndex].values,
														...newValues,
													].filter(
														(v, i, a) =>
															a.findIndex(
																t => t.toLowerCase() === v.toLowerCase()
															) === i
													); // Prevent duplicates
													setOptions(newOptions);
													e.target.value = '';
												}
											}
										}}
										className='border px-3 py-2 rounded flex-grow'
									/>
								</div>
							</div>
						))}
						<button
							type='button'
							onClick={() =>
								setOptions(prev => [...prev, { name: '', values: [] }])
							}
							className='px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 mt-2'
						>
							Add New Option
						</button>
					</div>

					<input
						type='file'
						multiple
						onChange={e =>
							setNewImages(prev => [...prev, ...Array.from(e.target.files)])
						}
						className='border px-3 py-2 rounded w-full'
					/>
					<div className='flex justify-end gap-2 mt-3'>
						<button
							type='button'
							onClick={onClose}
							className='px-4 py-2 rounded bg-gray-300 hover:bg-gray-400'
						>
							Cancel
						</button>
						<button
							type='submit'
							disabled={submitting}
							className={`px-4 py-2 rounded text-white ${
								submitting
									? 'bg-gray-500 cursor-not-allowed'
									: 'bg-blue-600 hover:bg-blue-700'
							}`}
						>
							{submitting ? 'Updating...' : 'Update'}
						</button>
					</div>
				</form>
			</div>
		</div>
	);
};

export default EditProductModal;
</file>

<file path="models/Category.js">
// models/Category.js
import mongoose from 'mongoose';

const CategorySchema = new mongoose.Schema({
	name: { type: String, required: true, unique: true },
	date: { type: Date, default: Date.now },
});

export default mongoose.models.Category ||
	mongoose.model('Category', CategorySchema);
</file>

<file path="app/all-products/page.jsx">
'use client';
import ProductCard from '@/components/ProductCard';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { useAppContext } from '@/context/AppContext';

const AllProducts = () => {
	const { products } = useAppContext();

	return (
		<>
			<Navbar />
			<div className='flex flex-col items-start px-6 md:px-16 lg:px-32'>
				<div className='flex flex-col items-end pt-12'>
					<p className='text-2xl font-medium'>All products</p>
					<div className='w-16 h-0.5 bg-main-color-600 rounded-full'></div>
				</div>
				<div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 flex-col items-center gap-6 mt-12 pb-14 w-full'>
					{products.map((product, index) => (
						<ProductCard key={index} product={product} />
					))}
				</div>
			</div>
			<Footer />
		</>
	);
};

export default AllProducts;
</file>

<file path="app/api/cart/get/route.js">
import connectDB from '@/config/db';
import User from '@/models/User';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function GET(request) {
	try {
		const { userId } = getAuth(request);

		await connectDB();
		const user = await User.findById(userId);

		const { cartItems } = user;

		return NextResponse.json({
			success: true,
			cartItems,
		});
	} catch (error) {
		return NextResponse.json({ success: false, message: error.message });
	}
}
</file>

<file path="app/api/cart/update/route.js">
import connectDB from '@/config/db';
import User from '@/models/User';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function POST(request) {
	try {
		console.log('work here');
		const { userId } = getAuth(request);
		const { cartData } = await request.json();
		await connectDB();
		console.log(cartData);

		const user = await User.findById(userId);
		user.cartItems = cartData;
		await user.save();
		return NextResponse.json({
			success: true,
			message: 'Cart updated successfully',
		});
	} catch (error) {
		return NextResponse.json({ success: false, message: error.message });
	}
}
</file>

<file path="app/api/order/list/route.js">
import connectDB from '@/config/db';
import Address from '@/models/Address';
import Order from '@/models/Order';
import Product from '@/models/Product';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function GET(request) {
	try {
		const { userId } = getAuth(request);
		await connectDB();
		Address.length;
		Product.length;
		const orders = await Order.find({ userId }).populate(
			'address items.product'
		);

		return NextResponse.json({
			success: true,
			orders,
		});
	} catch (error) {
		console.log(error);
		return NextResponse.json({
			success: false,
			message: error.message,
		});
	}
}
</file>

<file path="app/api/order/seller-orders/route.js">
import connectDB from '@/config/db';
import authSeller from '@/lib/authSeller';
import Address from '@/models/Address';
import Order from '@/models/Order';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function GET(request) {
	try {
		const { userId } = getAuth(request);
		const isSeller = await authSeller(userId);
		if (!isSeller) {
			return NextResponse.json({
				success: false,
				message: 'You are not a seller',
			});
		}
		await connectDB();
		Address.length;
		const orders = await Order.find({}).populate('address items.product');

		return NextResponse.json({
			success: true,
			orders,
		});
	} catch (error) {
		console.log(error);
		return NextResponse.json({
			success: false,
			message: error.message,
		});
	}
}
</file>

<file path="app/api/product/add/route.js">
import connectDB from '@/config/db';
import authSeller from '@/lib/authSeller';
import Product from '@/models/Product';
import { getAuth } from '@clerk/nextjs/server';
import { v2 as cloudinary } from 'cloudinary';
import { NextResponse } from 'next/server';

cloudinary.config({
	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
	api_key: process.env.CLOUDINARY_API_KEY,
	api_secret: process.env.CLOUDINARY_API_SECRET,
});

export async function POST(request) {
	try {
		const { userId } = getAuth(request);
		const isSeller = await authSeller(userId);
		if (!isSeller) {
			return NextResponse.json({
				success: false,
				message: 'You are not a seller',
			});
		}

		const formData = await request.formData();

		const name = formData.get('name');
		const description = formData.get('description');
		const categories = formData.get('categories');
		const price = formData.get('price');
		const offerPrice = formData.get('offerPrice');
		const options = formData.get('options'); // Get options data
		console.log(typeof JSON.parse(options.replace(/'/g, '"')));
		console.log(JSON.parse(options.replace(/'/g, '"')));
		const files = formData.getAll('images');

		if (!files || files.length === 0) {
			return NextResponse.json({
				success: false,
				message: 'No images uploaded',
			});
		}

		const result = await Promise.all(
			files.map(async file => {
				const arrayBuffer = await file.arrayBuffer();
				const buffer = Buffer.from(arrayBuffer);

				return new Promise((resolve, reject) => {
					const stream = cloudinary.uploader.upload_stream(
						{ resource_type: 'auto' },
						(error, result) => {
							if (error) {
								reject(error);
							} else {
								resolve(result);
							}
						}
					);

					stream.end(buffer);
				});
			})
		);

		const image = result.map(result => result.secure_url);

		await connectDB();
		console.log(result);
		console.log(image);
		const newProduct = await Product.create({
			userId,
			name,
			description,
			price: Number(price),
			offerPrice: Number(offerPrice),
			categories: categories.split(',').map(item => item.trim()),
			image,
			options: JSON.parse(options.replace(/'/g, '"')),
			date: Date.now(),
		});

		return NextResponse.json({
			success: true,
			message: 'Product added successfully',
			newProduct,
		});
	} catch (error) {
		console.log(error);
		return NextResponse.json({
			success: false,
			message: error.message,
		});
	}
}
</file>

<file path="app/api/product/list/route.js">
import connectDB from '@/config/db';
import Product from '@/models/Product';
import { NextResponse } from 'next/server';

export async function GET(request) {
	try {
		await connectDB();

		const products = await Product.find({});

		return NextResponse.json({ success: true, products });
	} catch (error) {
		console.log(error);
		return NextResponse.json({ success: false, message: error.message });
	}
}
</file>

<file path="app/api/product/seller-list/route.js">
import connectDB from '@/config/db';
import authSeller from '@/lib/authSeller';
import Product from '@/models/Product';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function GET(request) {
	try {
		const { userId } = getAuth(request);

		const isSeller = authSeller(userId);
		if (!isSeller) {
			return NextResponse.json({ success: false, message: 'not authorized' });
		}
		await connectDB();

		const products = await Product.find({});

		return NextResponse.json({ success: true, products });
	} catch (error) {
		console.log(error);
		return NextResponse.json({ success: false, message: error.message });
	}
}
</file>

<file path="app/api/user/add-address/route.js">
import connectDB from '@/config/db';
import Address from '@/models/Address';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function POST(request) {
	try {
		const { userId } = getAuth(request);

		const { address } = await request.json();
		await connectDB();
		const newAddress = await Address.create({ ...address, userId });
		return NextResponse.json({
			success: true,
			message: 'Address added successfully',
			newAddress,
		});
	} catch (error) {
		return NextResponse.json({ success: false, message: error.message });
	}
}
</file>

<file path="app/api/user/data/route.js">
import connectDB from '@/config/db';
import User from '@/models/User';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function GET(request) {
	try {
		const { userId } = getAuth(request);
		await connectDB();
		const user = await User.findById(userId);
		if (!user) {
			return NextResponse.json(
				{ success: false, message: 'User not found' },
				{ status: 404 }
			);
		}
		return NextResponse.json({ success: true, user });
	} catch (err) {
		return NextResponse.json(
			{ success: false, message: err.message },
			{ status: 500 }
		);
	}
}
</file>

<file path="app/cart/page.jsx">
'use client';
import React from 'react';
import { assets } from '@/assets/assets';
import OrderSummary from '@/components/OrderSummary';
import Image from 'next/image';
import Navbar from '@/components/Navbar';
import { useAppContext } from '@/context/AppContext';

const Cart = () => {
	const {
		products,
		router,
		cartItems,
		addToCart,
		updateCartQuantity,
		getCartCount,
	} = useAppContext();

	return (
		<>
			<Navbar />
			<div className='flex flex-col md:flex-row gap-10 px-6 md:px-16 lg:px-32 pt-14 mb-20'>
				<div className='flex-1'>
					<div className='flex items-center justify-between mb-8 border-b border-gray-500/30 pb-6'>
						<p className='text-2xl md:text-3xl text-gray-500'>
							Your <span className='font-medium text-main-color-600'>Cart</span>
						</p>
						<p className='text-lg md:text-xl text-gray-500/80'>
							{getCartCount()} Items
						</p>
					</div>
					<div className='overflow-x-auto'>
						<table className='min-w-full table-auto'>
							<thead className='text-left'>
								<tr>
									<th className='text-nowrap pb-6 md:px-4 px-1 text-gray-600 font-medium'>
										Product Details
									</th>
									<th className='pb-6 md:px-4 px-1 text-gray-600 font-medium'>
										Price
									</th>
									<th className='pb-6 md:px-4 px-1 text-gray-600 font-medium'>
										Quantity
									</th>
									<th className='pb-6 md:px-4 px-1 text-gray-600 font-medium'>
										Subtotal
									</th>
								</tr>
							</thead>
							<tbody>
								{Object.keys(cartItems).map(itemId => {
									const product = products.find(
										product => product._id === itemId
									);

									if (!product || cartItems[itemId] <= 0) return null;

									return (
										<tr key={itemId}>
											<td className='flex items-center gap-4 py-4 md:px-4 px-1'>
												<div>
													<div className='rounded-lg overflow-hidden bg-gray-500/10 p-2'>
														<Image
															src={product.image[0]}
															alt={product.name}
															className='w-16 h-auto object-cover mix-blend-multiply'
															width={1280}
															height={720}
														/>
													</div>
													<button
														className='md:hidden text-xs text-main-color-600 mt-1'
														onClick={() => updateCartQuantity(product._id, 0)}
													>
														Remove
													</button>
												</div>
												<div className='text-sm hidden md:block'>
													<p className='text-gray-800'>{product.name}</p>
													<button
														className='text-xs text-main-color-600 mt-1'
														onClick={() => updateCartQuantity(product._id, 0)}
													>
														Remove
													</button>
												</div>
											</td>
											<td className='py-4 md:px-4 px-1 text-gray-600'>
												${product.offerPrice}
											</td>
											<td className='py-4 md:px-4 px-1'>
												<div className='flex items-center md:gap-2 gap-1'>
													<button
														onClick={() =>
															updateCartQuantity(
																product._id,
																cartItems[itemId] - 1
															)
														}
													>
														<Image
															src={assets.decrease_arrow}
															alt='decrease_arrow'
															className='w-4 h-4'
														/>
													</button>
													<input
														onChange={e =>
															updateCartQuantity(
																product._id,
																Number(e.target.value)
															)
														}
														type='number'
														value={cartItems[itemId]}
														className='w-8 border text-center appearance-none'
													></input>
													<button onClick={() => addToCart(product._id)}>
														<Image
															src={assets.increase_arrow}
															alt='increase_arrow'
															className='w-4 h-4'
														/>
													</button>
												</div>
											</td>
											<td className='py-4 md:px-4 px-1 text-gray-600'>
												${(product.offerPrice * cartItems[itemId]).toFixed(2)}
											</td>
										</tr>
									);
								})}
							</tbody>
						</table>
					</div>
					<button
						onClick={() => router.push('/all-products')}
						className='group flex items-center mt-6 gap-2 text-main-color-600'
					>
						<Image
							className='group-hover:-translate-x-1 transition'
							src={assets.arrow_right_icon_colored}
							alt='arrow_right_icon_colored'
						/>
						Continue Shopping
					</button>
				</div>
				<OrderSummary />
			</div>
		</>
	);
};

export default Cart;
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
    scroll-behavior: smooth;
}

@layer base {
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

::-webkit-scrollbar {
  display: none;
}
</file>

<file path="app/layout.js">
import { Outfit } from 'next/font/google';
import './globals.css';
import { AppContextProvider } from '@/context/AppContext';
import { Toaster } from 'react-hot-toast';
import { ClerkProvider } from '@clerk/nextjs';

const outfit = Outfit({ subsets: ['latin'], weight: ['300', '400', '500'] });

export const metadata = {
	title: 'DemoCommerce - GhorbelStack',
	description: 'E-Commerce with Next.js ',
};

export default function RootLayout({ children }) {
	return (
		<ClerkProvider>
			<html lang='en'>
				<body className={`${outfit.className} antialiased text-gray-700`}>
					<Toaster />
					<AppContextProvider>{children}</AppContextProvider>
				</body>
			</html>
		</ClerkProvider>
	);
}
</file>

<file path="app/order-placed/page.jsx">
'use client'
import { assets } from '@/assets/assets'
import { useAppContext } from '@/context/AppContext'
import Image from 'next/image'
import { useEffect } from 'react'

const OrderPlaced = () => {

  const { router } = useAppContext()

  useEffect(() => {
    setTimeout(() => {
      router.push('/my-orders')
    }, 5000)
  }, [])

  return (
    <div className='h-screen flex flex-col justify-center items-center gap-5'>
      <div className="flex justify-center items-center relative">
        <Image className="absolute p-5" src={assets.checkmark} alt='' />
        <div className="animate-spin rounded-full h-24 w-24 border-4 border-t-green-300 border-gray-200"></div>
      </div>
      <div className="text-center text-2xl font-semibold">Order Placed Successfully</div>
    </div>
  )
}

export default OrderPlaced
</file>

<file path="app/page.jsx">
'use client'
import React from "react";
import HeaderSlider from "@/components/HeaderSlider";
import HomeProducts from "@/components/HomeProducts";
import Banner from "@/components/Banner";
import NewsLetter from "@/components/NewsLetter";
import FeaturedProduct from "@/components/FeaturedProduct";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";

const Home = () => {
  return (
    <>
      <Navbar/>
      <div className="px-6 md:px-16 lg:px-32">
        <HeaderSlider />
        <HomeProducts />
        <FeaturedProduct />
        <Banner />
        <NewsLetter />
      </div>
      <Footer />
    </>
  );
};

export default Home;
</file>

<file path="app/product/[id]/page.jsx">
'use client';
import { useEffect, useState } from 'react';
import { assets } from '@/assets/assets';
import ProductCard from '@/components/ProductCard';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import Image from 'next/image';
import { useParams } from 'next/navigation';
import Loading from '@/components/Loading';
import { useAppContext } from '@/context/AppContext';

const Product = () => {
	const { id } = useParams();

	const { products, router, addToCart } = useAppContext();

	const [mainImage, setMainImage] = useState(null);
	const [productData, setProductData] = useState(null);
	// State to hold selected options for the current product
	const [selectedOptions, setSelectedOptions] = useState({});

	const fetchProductData = async () => {
		const product = products.find(product => product._id === id);
		setProductData(product);
		// Initialize selected options with the first value of each option
		if (product && product.options && product.options.length > 0) {
			const initialOptions = {};
			product.options.forEach(option => {
				if (option.values && option.values.length > 0) {
					initialOptions[option.name] = option.values[0];
				}
			});
			setSelectedOptions(initialOptions);
		} else {
			setSelectedOptions({}); // Reset if no options
		}
	};

	useEffect(() => {
		fetchProductData();
	}, [id, products.length]);

	// Handle option selection change
	const handleOptionChange = (optionName, value) => {
		setSelectedOptions(prev => ({
			...prev,
			[optionName]: value,
		}));
	};

	// Modified addToCart to include selected options
	const handleAddToCart = () => {
		addToCart(productData._id, selectedOptions);
	};

	// Modified Buy now to include selected options
	const handleBuyNow = () => {
		addToCart(productData._id, selectedOptions);
		router.push('/cart');
	};

	return productData ? (
		<>
			<Navbar />
			<div className='px-6 md:px-16 lg:px-32 pt-14 space-y-10'>
				<div className='grid grid-cols-1 md:grid-cols-2 gap-16'>
					<div className='px-5 lg:px-16 xl:px-20'>
						<div className='rounded-lg overflow-hidden bg-gray-500/10 mb-4'>
							<Image
								src={mainImage || productData.image[0]}
								alt='alt'
								className='w-full h-auto object-cover mix-blend-multiply'
								width={1280}
								height={720}
							/>
						</div>

						<div className='grid grid-cols-4 gap-4'>
							{productData.image.map((image, index) => (
								<div
									key={index}
									onClick={() => setMainImage(image)}
									className='cursor-pointer rounded-lg overflow-hidden bg-gray-500/10'
								>
									<Image
										src={image}
										alt='alt'
										className='w-full h-auto object-cover mix-blend-multiply'
										width={1280}
										height={720}
									/>
								</div>
							))}
						</div>
					</div>

					<div className='flex flex-col'>
						<h1 className='text-3xl font-medium text-gray-800/90 mb-4'>
							{productData.name}
						</h1>
						<div className='flex items-center gap-2'>
							<div className='flex items-center gap-0.5'>
								<Image
									className='h-4 w-4'
									src={assets.star_icon}
									alt='star_icon'
								/>
								<Image
									className='h-4 w-4'
									src={assets.star_icon}
									alt='star_icon'
								/>
								<Image
									className='h-4 w-4'
									src={assets.star_icon}
									alt='star_icon'
								/>
								<Image
									className='h-4 w-4'
									src={assets.star_icon}
									alt='star_icon'
								/>
								<Image
									className='h-4 w-4'
									src={assets.star_dull_icon}
									alt='star_dull_icon'
								/>
							</div>
							<p>(4.5)</p>
						</div>
						<p className='text-gray-600 mt-3'>{productData.description}</p>
						<p className='text-3xl font-medium mt-6'>
							${productData.offerPrice}
							<span className='text-base font-normal text-gray-800/60 line-through ml-2'>
								${productData.price}
							</span>
						</p>
						<hr className='bg-gray-600 my-6' />
						<div className='overflow-x-auto'>
							<table className='table-auto border-collapse w-full max-w-72'>
								<tbody>
									<tr>
										<td className='text-gray-600 font-medium'>Brand</td>
										<td className='text-gray-800/50 '>Generic</td>
									</tr>
									<tr>
										<td className='text-gray-600 font-medium'>Color</td>
										<td className='text-gray-800/50 '>Multi</td>
									</tr>
									<tr>
										<td className='text-gray-600 font-medium'>Categories</td>
										<td className='text-gray-800/50'>
											{productData.categories.join(', ')}
										</td>
									</tr>
								</tbody>
							</table>
						</div>

						{/* Product Options Display */}
						{productData.options && productData.options.length > 0 && (
							<div className='mt-6 space-y-4'>
								{productData.options.map(option => (
									<div key={option.name}>
										<label className='block text-gray-700 font-medium mb-2'>
											{option.name}:
										</label>
										<select
											value={selectedOptions[option.name] || ''}
											onChange={e =>
												handleOptionChange(option.name, e.target.value)
											}
											className='block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm'
										>
											{option.values.map(value => (
												<option key={value} value={value}>
													{value}
												</option>
											))}
										</select>
									</div>
								))}
							</div>
						)}

						<div className='flex items-center mt-10 gap-4'>
							<button
								onClick={handleAddToCart}
								className='w-full py-3.5 bg-gray-100 text-gray-800/80 hover:bg-gray-200 transition'
							>
								Add to Cart
							</button>
							<button
								onClick={handleBuyNow}
								className='w-full py-3.5 bg-main-color-500 text-white hover:bg-main-color-600 transition'
							>
								Buy now
							</button>
						</div>
					</div>
				</div>
				<div className='flex flex-col items-center'>
					<div className='flex flex-col items-center mb-4 mt-16'>
						<p className='text-3xl font-medium'>
							Featured{' '}
							<span className='font-medium text-main-color-600'>Products</span>
						</p>
						<div className='w-28 h-0.5 bg-main-color-600 mt-2'></div>
					</div>
					<div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6 mt-6 pb-14 w-full'>
						{products.slice(0, 5).map((product, index) => (
							<ProductCard key={index} product={product} />
						))}
					</div>
					<button className='px-8 py-2 mb-16 border rounded text-gray-500/70 hover:bg-slate-50/90 transition'>
						See more
					</button>
				</div>
			</div>
			<Footer />
		</>
	) : (
		<Loading />
	);
};

export default Product;
</file>

<file path="app/seller/layout.jsx">
'use client'
import Navbar from '@/components/seller/Navbar'
import Sidebar from '@/components/seller/Sidebar'
import React from 'react'

const Layout = ({ children }) => {
  return (
    <div>
      <Navbar />
      <div className='flex w-full'>
        <Sidebar />
        {children}
      </div>
    </div>
  )
}

export default Layout
</file>

<file path="components/Banner.jsx">
import React from 'react';
import { assets } from '@/assets/assets';
import Image from 'next/image';

const Banner = () => {
	return (
		<div className='flex flex-col md:flex-row items-center justify-between md:pl-20 py-14 md:py-0 bg-[#E6E9F2] my-16 rounded-xl overflow-hidden'>
			<Image
				className='max-w-56'
				src={assets.jbl_soundbox_image}
				alt='jbl_soundbox_image'
			/>
			<div className='flex flex-col items-center justify-center text-center space-y-2 px-4 md:px-0'>
				<h2 className='text-2xl md:text-3xl font-semibold max-w-[290px]'>
					Level Up Your Gaming Experience
				</h2>
				<p className='max-w-[343px] font-medium text-gray-800/60'>
					From immersive sound to precise controls—everything you need to win
				</p>
				<button className='group flex items-center justify-center gap-1 px-12 py-2.5 bg-main-color-600 rounded text-white'>
					Buy now
					<Image
						className='group-hover:translate-x-1 transition'
						src={assets.arrow_icon_white}
						alt='arrow_icon_white'
					/>
				</button>
			</div>
			<Image
				className='hidden md:block max-w-80'
				src={assets.md_controller_image}
				alt='md_controller_image'
			/>
			<Image
				className='md:hidden'
				src={assets.sm_controller_image}
				alt='sm_controller_image'
			/>
		</div>
	);
};

export default Banner;
</file>

<file path="components/FeaturedProduct.jsx">
import React from 'react';
import { assets } from '@/assets/assets';
import Image from 'next/image';

const products = [
	{
		id: 1,
		image: assets.girl_with_headphone_image,
		title: 'Unparalleled Sound',
		description: 'Experience crystal-clear audio with premium headphones.',
	},
	{
		id: 2,
		image: assets.girl_with_earphone_image,
		title: 'Stay Connected',
		description: 'Compact and stylish earphones for every occasion.',
	},
	{
		id: 3,
		image: assets.boy_with_laptop_image,
		title: 'Power in Every Pixel',
		description: 'Shop the latest laptops for work, gaming, and more.',
	},
];

const FeaturedProduct = () => {
	return (
		<div className='mt-14'>
			<div className='flex flex-col items-center'>
				<p className='text-3xl font-medium'>Featured Products</p>
				<div className='w-28 h-0.5 bg-main-color-600 mt-2'></div>
			</div>

			<div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-14 mt-12 md:px-14 px-4'>
				{products.map(({ id, image, title, description }) => (
					<div key={id} className='relative group'>
						<Image
							src={image}
							alt={title}
							className='group-hover:brightness-75 transition duration-300 w-full h-auto object-cover'
						/>
						<div className='group-hover:-translate-y-4 transition duration-300 absolute bottom-8 left-8 text-white space-y-2'>
							<p className='font-medium text-xl lg:text-2xl'>{title}</p>
							<p className='text-sm lg:text-base leading-5 max-w-60'>
								{description}
							</p>
							<button className='flex items-center gap-1.5 bg-main-color-600 px-4 py-2 rounded'>
								Buy now{' '}
								<Image
									className='h-3 w-3'
									src={assets.redirect_icon}
									alt='Redirect Icon'
								/>
							</button>
						</div>
					</div>
				))}
			</div>
		</div>
	);
};

export default FeaturedProduct;
</file>

<file path="components/Footer.jsx">
import React from "react";
import { assets } from "@/assets/assets";
import Image from "next/image";

const Footer = () => {
  return (
    <footer>
      <div className="flex flex-col md:flex-row items-start justify-center px-6 md:px-16 lg:px-32 gap-10 py-14 border-b border-gray-500/30 text-gray-500">
        <div className="w-4/5">
          <Image className="w-28 md:w-32" src={assets.logo} alt="logo" />
          <p className="mt-6 text-sm">
            Lorem Ipsum is simply dummy text of the printing and typesetting
            industry. Lorem Ipsum has been the industry's standard dummy text
            ever since the 1500s, when an unknown printer took a galley of type
            and scrambled it to make a type specimen book.
          </p>
        </div>

        <div className="w-1/2 flex items-center justify-start md:justify-center">
          <div>
            <h2 className="font-medium text-gray-900 mb-5">Company</h2>
            <ul className="text-sm space-y-2">
              <li>
                <a className="hover:underline transition" href="#">Home</a>
              </li>
              <li>
                <a className="hover:underline transition" href="#">About us</a>
              </li>
              <li>
                <a className="hover:underline transition" href="#">Contact us</a>
              </li>
              <li>
                <a className="hover:underline transition" href="#">Privacy policy</a>
              </li>
            </ul>
          </div>
        </div>

        <div className="w-1/2 flex items-start justify-start md:justify-center">
          <div>
            <h2 className="font-medium text-gray-900 mb-5">Get in touch</h2>
            <div className="text-sm space-y-2">
              <p>+1-234-567-890</p>
              <p>contact@greatstack.dev</p>
            </div>
          </div>
        </div>
      </div>
      <p className="py-4 text-center text-xs md:text-sm">
        Copyright 2025 © GreatStack.dev All Right Reserved.
      </p>
    </footer>
  );
};

export default Footer;
</file>

<file path="components/HeaderSlider.jsx">
import React, { useState, useEffect } from 'react';
import { assets } from '@/assets/assets';
import Image from 'next/image';

const HeaderSlider = () => {
	const sliderData = [
		{
			id: 1,
			title: 'Experience Pure Sound - Your Perfect Headphones Awaits!',
			offer: 'Limited Time Offer 30% Off',
			buttonText1: 'Buy now',
			buttonText2: 'Find more',
			imgSrc: assets.header_headphone_image,
		},
		{
			id: 2,
			title: 'Next-Level Gaming Starts Here - Discover PlayStation 5 Today!',
			offer: 'Hurry up only few lefts!',
			buttonText1: 'Shop Now',
			buttonText2: 'Explore Deals',
			imgSrc: assets.header_playstation_image,
		},
		{
			id: 3,
			title: 'Power Meets Elegance - Apple MacBook Pro is Here for you!',
			offer: 'Exclusive Deal 40% Off',
			buttonText1: 'Order Now',
			buttonText2: 'Learn More',
			imgSrc: assets.header_macbook_image,
		},
	];

	const [currentSlide, setCurrentSlide] = useState(0);

	useEffect(() => {
		const interval = setInterval(() => {
			setCurrentSlide(prev => (prev + 1) % sliderData.length);
		}, 3000);
		return () => clearInterval(interval);
	}, [sliderData.length]);

	const handleSlideChange = index => {
		setCurrentSlide(index);
	};

	return (
		<div className='overflow-hidden relative w-full'>
			<div
				className='flex transition-transform duration-700 ease-in-out'
				style={{
					transform: `translateX(-${currentSlide * 100}%)`,
				}}
			>
				{sliderData.map((slide, index) => (
					<div
						key={slide.id}
						className='flex flex-col-reverse md:flex-row items-center justify-between bg-[#E6E9F2] py-8 md:px-14 px-5 mt-6 rounded-xl min-w-full'
					>
						<div className='md:pl-8 mt-10 md:mt-0'>
							<p className='md:text-base text-main-color-600 pb-1'>
								{slide.offer}
							</p>
							<h1 className='max-w-lg md:text-[40px] md:leading-[48px] text-2xl font-semibold'>
								{slide.title}
							</h1>
							<div className='flex items-center mt-4 md:mt-6 '>
								<button className='md:px-10 px-7 md:py-2.5 py-2 bg-main-color-600 rounded-full text-white font-medium'>
									{slide.buttonText1}
								</button>
								<button className='group flex items-center gap-2 px-6 py-2.5 font-medium'>
									{slide.buttonText2}
									<Image
										className='group-hover:translate-x-1 transition'
										src={assets.arrow_icon}
										alt='arrow_icon'
									/>
								</button>
							</div>
						</div>
						<div className='flex items-center flex-1 justify-center'>
							<Image
								className='md:w-72 w-48'
								src={slide.imgSrc}
								alt={`Slide ${index + 1}`}
							/>
						</div>
					</div>
				))}
			</div>

			<div className='flex items-center justify-center gap-2 mt-8'>
				{sliderData.map((_, index) => (
					<div
						key={index}
						onClick={() => handleSlideChange(index)}
						className={`h-2 w-2 rounded-full cursor-pointer ${
							currentSlide === index ? 'bg-main-color-600' : 'bg-gray-500/30'
						}`}
					></div>
				))}
			</div>
		</div>
	);
};

export default HeaderSlider;
</file>

<file path="components/HomeProducts.jsx">
import React from "react";
import ProductCard from "./ProductCard";
import { useAppContext } from "@/context/AppContext";

const HomeProducts = () => {

  const { products, router } = useAppContext()

  return (
    <div className="flex flex-col items-center pt-14">
      <p className="text-2xl font-medium text-left w-full">Popular products</p>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 flex-col items-center gap-6 mt-6 pb-14 w-full">
        {products.map((product, index) => <ProductCard key={index} product={product} />)}
      </div>
      <button onClick={() => { router.push('/all-products') }} className="px-12 py-2.5 border rounded text-gray-500/70 hover:bg-slate-50/90 transition">
        See more
      </button>
    </div>
  );
};

export default HomeProducts;
</file>

<file path="components/Loading.jsx">
import React from 'react';

const Loading = () => {
	return (
		<div className='flex justify-center items-center h-[70vh]'>
			<div className='animate-spin rounded-full h-20 w-20 border-4 border-t-main-color-300 border-gray-200'></div>
		</div>
	);
};

export default Loading;
</file>

<file path="components/Navbar.jsx">
'use client';
import React from 'react';
import { assets, BagIcon, BoxIcon, CartIcon, HomeIcon } from '@/assets/assets';
import Link from 'next/link';
import { useAppContext } from '@/context/AppContext';
import Image from 'next/image';
import { useClerk, UserButton } from '@clerk/nextjs';

const Navbar = () => {
	const { isSeller, router, user } = useAppContext();
	console.log(isSeller);
	console.log(user);
	console.log(Boolean(user) && isSeller);
	const { openSignIn } = useClerk();
	return (
		<nav className='flex items-center justify-between px-6 md:px-16 lg:px-32 py-3 border-b border-gray-300 text-gray-700'>
			<Image
				className='cursor-pointer w-28 md:w-32'
				onClick={() => router.push('/')}
				src={assets.logo}
				alt='logo'
			/>
			<div className='flex items-center gap-4 lg:gap-8 max-md:hidden'>
				<Link href='/' className='hover:text-gray-900 transition'>
					Home
				</Link>
				<Link href='/all-products' className='hover:text-gray-900 transition'>
					Shop
				</Link>
				<Link href='/' className='hover:text-gray-900 transition'>
					About Us
				</Link>
				<Link href='/' className='hover:text-gray-900 transition'>
					Contact
				</Link>

				{Boolean(user) && isSeller && (
					<button
						onClick={() => router.push('/seller')}
						className='text-xs border px-4 py-1.5 rounded-full'
					>
						Seller Dashboard
					</button>
				)}
			</div>

			<ul className='hidden md:flex items-center gap-4 '>
				<Image className='w-4 h-4' src={assets.search_icon} alt='search icon' />
				{user ? (
					<>
						<UserButton>
							<UserButton.MenuItems>
								<UserButton.Action
									label='Cart'
									labelIcon={<CartIcon />}
									onClick={() => router.push('/cart')}
								/>
							</UserButton.MenuItems>
							<UserButton.MenuItems>
								<UserButton.Action
									label='My Orders'
									labelIcon={<BagIcon />}
									onClick={() => router.push('/my-orders')}
								/>
							</UserButton.MenuItems>
						</UserButton>
					</>
				) : (
					<button
						onClick={openSignIn}
						className='flex items-center gap-2 hover:text-gray-900 transition'
					>
						<Image src={assets.user_icon} alt='user icon' />
						Account
					</button>
				)}
			</ul>

			<div className='flex items-center md:hidden gap-3'>
				{Boolean(user) && isSeller && (
					<button
						onClick={() => router.push('/seller')}
						className='text-xs border px-4 py-1.5 rounded-full'
					>
						Seller Dashboard
					</button>
				)}

				{user ? (
					<>
						<UserButton>
							<UserButton.MenuItems>
								<UserButton.Action
									label='Home'
									labelIcon={<HomeIcon />}
									onClick={() => router.push('/')}
								/>
							</UserButton.MenuItems>
							<UserButton.MenuItems>
								<UserButton.Action
									label='Products'
									labelIcon={<BoxIcon />}
									onClick={() => router.push('/all-products')}
								/>
							</UserButton.MenuItems>
							<UserButton.MenuItems>
								<UserButton.Action
									label='Cart'
									labelIcon={<CartIcon />}
									onClick={() => router.push('/cart')}
								/>
							</UserButton.MenuItems>
							<UserButton.MenuItems>
								<UserButton.Action
									label='My Orders'
									labelIcon={<BagIcon />}
									onClick={() => router.push('/my-orders')}
								/>
							</UserButton.MenuItems>
						</UserButton>
					</>
				) : (
					<button
						onClick={openSignIn}
						className='flex items-center gap-2 hover:text-gray-900 transition'
					>
						<Image src={assets.user_icon} alt='user icon' />
						Account
					</button>
				)}
			</div>
		</nav>
	);
};

export default Navbar;
</file>

<file path="components/NewsLetter.jsx">
import React from 'react';

const NewsLetter = () => {
	return (
		<div className='flex flex-col items-center justify-center text-center space-y-2 pt-8 pb-14'>
			<h1 className='md:text-4xl text-2xl font-medium'>
				Subscribe now & get 20% off
			</h1>
			<p className='md:text-base text-gray-500/80 pb-8'>
				Lorem Ipsum is simply dummy text of the printing and typesetting
				industry.
			</p>
			<div className='flex items-center justify-between max-w-2xl w-full md:h-14 h-12'>
				<input
					className='border border-gray-500/30 rounded-md h-full border-r-0 outline-none w-full rounded-r-none px-3 text-gray-500'
					type='text'
					placeholder='Enter your email id'
				/>
				<button className='md:px-12 px-8 h-full text-white bg-main-color-600 rounded-md rounded-l-none'>
					Subscribe
				</button>
			</div>
		</div>
	);
};

export default NewsLetter;
</file>

<file path="components/ProductCard.jsx">
import React from 'react'
import { assets } from '@/assets/assets'
import Image from 'next/image';
import { useAppContext } from '@/context/AppContext';

const ProductCard = ({ product }) => {

    const { currency, router } = useAppContext()

    return (
        <div
            onClick={() => { router.push('/product/' + product._id); scrollTo(0, 0) }}
            className="flex flex-col items-start gap-0.5 max-w-[200px] w-full cursor-pointer"
        >
            <div className="cursor-pointer group relative bg-gray-500/10 rounded-lg w-full h-52 flex items-center justify-center">
                <Image
                    src={product.image[0]}
                    alt={product.name}
                    className="group-hover:scale-105 transition object-cover w-4/5 h-4/5 md:w-full md:h-full"
                    width={800}
                    height={800}
                />
                <button className="absolute top-2 right-2 bg-white p-2 rounded-full shadow-md">
                    <Image
                        className="h-3 w-3"
                        src={assets.heart_icon}
                        alt="heart_icon"
                    />
                </button>
            </div>

            <p className="md:text-base font-medium pt-2 w-full truncate">{product.name}</p>
            <p className="w-full text-xs text-gray-500/70 max-sm:hidden truncate">{product.description}</p>
            <div className="flex items-center gap-2">
                <p className="text-xs">{4.5}</p>
                <div className="flex items-center gap-0.5">
                    {Array.from({ length: 5 }).map((_, index) => (
                        <Image
                            key={index}
                            className="h-3 w-3"
                            src={
                                index < Math.floor(4)
                                    ? assets.star_icon
                                    : assets.star_dull_icon
                            }
                            alt="star_icon"
                        />
                    ))}
                </div>
            </div>

            <div className="flex items-end justify-between w-full mt-1">
                <p className="text-base font-medium">{currency}{product.offerPrice}</p>
                <button className=" max-sm:hidden px-4 py-1.5 text-gray-500 border border-gray-500/20 rounded-full text-xs hover:bg-slate-50 transition">
                    Buy now
                </button>
            </div>
        </div>
    )
}

export default ProductCard
</file>

<file path="components/seller/Footer.jsx">
import React from "react";
import { assets } from "@/assets/assets";
import Image from "next/image";

const Footer = () => {
  return (
    <div className="flex md:flex-row flex-col-reverse items-center justify-between text-left w-full px-10">
      <div className="flex items-center gap-4">
        <Image className="hidden md:block" src={assets.logo} alt="logo" />
        <div className="hidden md:block h-7 w-px bg-gray-500/60"></div>
        <p className="py-4 text-center text-xs md:text-sm text-gray-500">
          Copyright 2025 © greatstack.dev All Right Reserved.
        </p>
      </div>
      <div className="flex items-center gap-3">
        <a href="#">
          <Image src={assets.facebook_icon} alt="facebook_icon" />
        </a>
        <a href="#">
          <Image src={assets.twitter_icon} alt="twitter_icon" />
        </a>
        <a href="#">
          <Image src={assets.instagram_icon} alt="instagram_icon" />
        </a>
      </div>
    </div>
  );
};

export default Footer;
</file>

<file path="components/seller/Navbar.jsx">
import React from 'react'
import { assets } from '../../assets/assets'
import Image from 'next/image'
import { useAppContext } from '@/context/AppContext'

const Navbar = () => {

  const { router } = useAppContext()

  return (
    <div className='flex items-center px-4 md:px-8 py-3 justify-between border-b'>
      <Image onClick={()=>router.push('/')} className='w-28 lg:w-32 cursor-pointer' src={assets.logo} alt="" />
      <button className='bg-gray-600 text-white px-5 py-2 sm:px-7 sm:py-2 rounded-full text-xs sm:text-sm'>Logout</button>
    </div>
  )
}

export default Navbar
</file>

<file path="components/seller/Sidebar.jsx">
import React from 'react';
import Link from 'next/link';
import { assets } from '../../assets/assets';
import Image from 'next/image';
import { usePathname } from 'next/navigation';

const SideBar = () => {
	const pathname = usePathname();
	const menuItems = [
		{ name: 'Add Product', path: '/seller', icon: assets.add_icon },
		{
			name: 'Product List',
			path: '/seller/product-list',
			icon: assets.product_list_icon,
		},
		{ name: 'Orders', path: '/seller/orders', icon: assets.order_icon },
	];

	return (
		<div className='md:w-64 w-16 border-r min-h-screen text-base border-gray-300 py-2 flex flex-col'>
			{menuItems.map(item => {
				const isActive = pathname === item.path;

				return (
					<Link href={item.path} key={item.name} passHref>
						<div
							className={`flex items-center py-3 px-4 gap-3 ${
								isActive
									? 'border-r-4 md:border-r-[6px] bg-main-color-600/10 border-main-color-500/90'
									: 'hover:bg-gray-100/90 border-white'
							}`}
						>
							<Image
								src={item.icon}
								alt={`${item.name.toLowerCase()}_icon`}
								className='w-7 h-7'
							/>
							<p className='md:block hidden text-center'>{item.name}</p>
						</div>
					</Link>
				);
			})}
		</div>
	);
};

export default SideBar;
</file>

<file path="config/db.js">
import mongoose from 'mongoose';
let cached = global.mongoose;

if (!cached) {
	cached = global.mongoose = { conn: null, promise: null };
}
async function connectDB() {
	if (cached.conn) {
		return cached.conn;
	}
	if (!cached.promise) {
		const opts = {
			bufferCommands: false,
		};
		cached.promise = mongoose
			.connect(`${process.env.MONGODB_URI}/tempcommerce`, opts)
			.then(mongoose => {
				return mongoose;
			});
	}
	try {
		cached.conn = await cached.promise;
	} catch (e) {
		cached.promise = null;
		throw e;
	}
	return cached.conn;
}

export default connectDB;
</file>

<file path="lib/authSeller.js">
import { clerkClient } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

const authSeller = async (userId) => {
    try {

        const client = await clerkClient()
        const user = await client.users.getUser(userId)

        if (user.publicMetadata.role === 'seller') {
            return true;
        } else {
            return false;
        }
    } catch (error) {
        return NextResponse.json({ success: false, message: error.message });
    }
}

export default authSeller;
</file>

<file path="models/Product.js">
import mongoose from 'mongoose';

// Define the schema for product options
const OptionSchema = new mongoose.Schema({
	name: { type: String, required: true }, // e.g., "Size", "Color"
	values: { type: [String], required: true }, // e.g., ["S", "M", "L"], ["Red", "Blue"]
});

const productSchema = new mongoose.Schema({
	userId: { type: String, ref: 'user' },
	name: {
		type: String,
		required: true,
	},
	price: {
		type: Number,
		required: true,
	},
	offerPrice: {
		type: Number,
		required: true,
	},
	description: {
		type: String,
		required: true,
	},
	image: {
		type: [String],
		required: true,
	},
	categories: {
		type: [String],
		required: true,
	},
	// Add the new options field
	options: {
		type: [
			{
				name: { type: String, required: true }, // e.g., "Size", "Color"
				values: { type: [String], required: true }, // e.g., ["S", "M", "L"], ["Red", "Blue"]
			},
		], // Array of OptionSchema
		default: [],
	},
	date: {
		type: Number,
		required: true,
	},
});

const Product =
	mongoose.models.product || mongoose.model('product', productSchema);

export default Product;
</file>

<file path="app/add-address/page.jsx">
'use client';
import { assets } from '@/assets/assets';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import Image from 'next/image';
import { useState } from 'react';
import { useAppContext } from '@/context/AppContext';
import axios from 'axios';
import toast from 'react-hot-toast';

const AddAddress = () => {
	const { getToken, router } = useAppContext();
	const [address, setAddress] = useState({
		fullName: '',
		phoneNumber: '',
		pincode: '',
		area: '',
		city: '',
		state: '',
	});

	const onSubmitHandler = async e => {
		e.preventDefault();
		try {
			const token = await getToken();
			const { data } = await axios.post(
				'/api/user/add-address',
				{ address },
				{ headers: { Authorization: `Bearer ${token}` } }
			);
			if (data.success) {
				toast.success(data.message);
				router.push('/cart');
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
		}
	};

	return (
		<>
			<Navbar />
			<div className='px-6 md:px-16 lg:px-32 py-16 flex flex-col md:flex-row justify-between'>
				<form onSubmit={onSubmitHandler} className='w-full'>
					<p className='text-2xl md:text-3xl text-gray-500'>
						Add Shipping{' '}
						<span className='font-semibold text-main-color-600'>Address</span>
					</p>
					<div className='space-y-3 max-w-sm mt-10'>
						<input
							className='px-2 py-2.5 focus:border-main-color-500 transition border border-gray-500/30 rounded outline-none w-full text-gray-500'
							type='text'
							placeholder='Full name'
							onChange={e =>
								setAddress({ ...address, fullName: e.target.value })
							}
							value={address.fullName}
						/>
						<input
							className='px-2 py-2.5 focus:border-main-color-500 transition border border-gray-500/30 rounded outline-none w-full text-gray-500'
							type='text'
							placeholder='Phone number'
							onChange={e =>
								setAddress({ ...address, phoneNumber: e.target.value })
							}
							value={address.phoneNumber}
						/>
						<input
							className='px-2 py-2.5 focus:border-main-color-500 transition border border-gray-500/30 rounded outline-none w-full text-gray-500'
							type='text'
							placeholder='Pin code'
							onChange={e =>
								setAddress({ ...address, pincode: e.target.value })
							}
							value={address.pincode}
						/>
						<textarea
							className='px-2 py-2.5 focus:border-main-color-500 transition border border-gray-500/30 rounded outline-none w-full text-gray-500 resize-none'
							type='text'
							rows={4}
							placeholder='Address (Area and Street)'
							onChange={e => setAddress({ ...address, area: e.target.value })}
							value={address.area}
						></textarea>
						<div className='flex space-x-3'>
							<input
								className='px-2 py-2.5 focus:border-main-color-500 transition border border-gray-500/30 rounded outline-none w-full text-gray-500'
								type='text'
								placeholder='City/District/Town'
								onChange={e => setAddress({ ...address, city: e.target.value })}
								value={address.city}
							/>
							<input
								className='px-2 py-2.5 focus:border-main-color-500 transition border border-gray-500/30 rounded outline-none w-full text-gray-500'
								type='text'
								placeholder='State'
								onChange={e =>
									setAddress({ ...address, state: e.target.value })
								}
								value={address.state}
							/>
						</div>
					</div>
					<button
						type='submit'
						className='max-w-sm w-full mt-6 bg-main-color-600 text-white py-3 hover:bg-main-color-700 uppercase'
					>
						Save address
					</button>
				</form>
				<Image
					className='md:mr-16 mt-16 md:mt-0'
					src={assets.my_location_image}
					alt='my_location_image'
				/>
			</div>
			<Footer />
		</>
	);
};

export default AddAddress;
</file>

<file path="app/api/user/get-address/route.js">
import connectDB from '@/config/db';
import Address from '@/models/Address';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function GET(request) {
	try {
		const { userId } = getAuth(request);
		await connectDB();

		const addresses = await Address.find({ userId });
		console.log(addresses);

		return NextResponse.json({
			success: true,
			addresses,
		});
	} catch (error) {
		console.log(error);
		return NextResponse.json({ success: false, message: error.message });
	}
}
</file>

<file path="app/my-orders/page.jsx">
'use client';
import React, { useEffect, useState } from 'react';
import { assets, orderDummyData } from '@/assets/assets';
import Image from 'next/image';
import { useAppContext } from '@/context/AppContext';
import Footer from '@/components/Footer';
import Navbar from '@/components/Navbar';
import Loading from '@/components/Loading';
import axios from 'axios';
import toast from 'react-hot-toast';

const MyOrders = () => {
	const { currency, getToken, user } = useAppContext();

	const [orders, setOrders] = useState([]);
	const [loading, setLoading] = useState(true);

	const fetchOrders = async () => {
		try {
			const token = await getToken();
			const { data } = await axios.get('/api/order/list', {
				headers: { Authorization: `Bearer ${token}` },
			});
			console.log(data);
			if (data.success) {
				setOrders(data.orders.reverse());
				setLoading(false);
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
		}
	};

	useEffect(() => {
		if (user) {
			fetchOrders();
		}
	}, [user]);

	return (
		<>
			<Navbar />
			<div className='flex flex-col justify-between px-6 md:px-16 lg:px-32 py-6 min-h-screen'>
				<div className='space-y-5'>
					<h2 className='text-lg font-medium mt-6'>My Orders</h2>
					{loading ? (
						<Loading />
					) : (
						<div className='max-w-5xl border-t border-gray-300 text-sm'>
							{orders.map((order, index) => (
								<div
									key={index}
									className='flex flex-col md:flex-row gap-5 justify-between p-5 border-b border-gray-300'
								>
									<div className='flex-1 flex gap-5 max-w-80'>
										<Image
											className='max-w-16 max-h-16 object-cover'
											src={assets.box_icon}
											alt='box_icon'
										/>
										<p className='flex flex-col gap-3'>
											<span className='font-medium text-base'>
												{order.items
													.map(
														item => item.product.name + ` x ${item.quantity}`
													)
													.join(', ')}
											</span>
											<span>Items : {order.items.length}</span>
										</p>
									</div>
									<div>
										<p>
											<span className='font-medium'>
												{order.address.fullName}
											</span>
											<br />
											<span>{order.address.area}</span>
											<br />
											<span>{`${order.address.city}, ${order.address.state}`}</span>
											<br />
											<span>{order.address.phoneNumber}</span>
										</p>
									</div>
									<p className='font-medium my-auto'>
										{currency}
										{order.amount}
									</p>
									<div>
										<p className='flex flex-col'>
											<span>Method : COD</span>
											<span>
												Date : {new Date(order.date).toLocaleDateString()}
											</span>
											<span>Payment : Pending</span>
										</p>
									</div>
								</div>
							))}
						</div>
					)}
				</div>
			</div>
			<Footer />
		</>
	);
};

export default MyOrders;
</file>

<file path="app/seller/orders/page.jsx">
'use client';
import React, { useEffect, useState } from 'react';
import { assets, orderDummyData } from '@/assets/assets';
import Image from 'next/image';
import { useAppContext } from '@/context/AppContext';
import Footer from '@/components/seller/Footer';
import Loading from '@/components/Loading';
import toast from 'react-hot-toast';
import axios from 'axios';

const Orders = () => {
	const { currency, getToken, user } = useAppContext();

	const [orders, setOrders] = useState([]);
	const [loading, setLoading] = useState(true);

	const fetchSellerOrders = async () => {
		try {
			const token = await getToken();
			const { data } = await axios.get('/api/order/seller-orders', {
				headers: { Authorization: `Bearer ${token}` },
			});
			if (data.success) {
				setOrders(data.orders);
				setLoading(false);
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
		}
	};

	useEffect(() => {
		if (user) {
			fetchSellerOrders();
		}
	}, [user]);

	return (
		<div className='flex-1 h-screen overflow-scroll flex flex-col justify-between text-sm'>
			{loading ? (
				<Loading />
			) : (
				<div className='md:p-10 p-4 space-y-5'>
					<h2 className='text-lg font-medium'>Orders</h2>
					<div className='max-w-4xl rounded-md'>
						{orders.map((order, index) => (
							<div
								key={index}
								className='flex flex-col md:flex-row gap-5 justify-between p-5 border-t border-gray-300'
							>
								<div className='flex-1 flex gap-5 max-w-80'>
									<Image
										className='max-w-16 max-h-16 object-cover'
										src={assets.box_icon}
										alt='box_icon'
									/>
									<p className='flex flex-col gap-3'>
										<span className='font-medium'>
											{order.items
												.map(item => item.product.name + ` x ${item.quantity}`)
												.join(', ')}
										</span>
										<span>Items : {order.items.length}</span>
									</p>
								</div>
								<div>
									<p>
										<span className='font-medium'>
											{order.address.fullName}
										</span>
										<br />
										<span>{order.address.area}</span>
										<br />
										<span>{`${order.address.city}, ${order.address.state}`}</span>
										<br />
										<span>{order.address.phoneNumber}</span>
									</p>
								</div>
								<p className='font-medium my-auto'>
									{currency}
									{order.amount}
								</p>
								<div>
									<p className='flex flex-col'>
										<span>Method : COD</span>
										<span>
											Date : {new Date(order.date).toLocaleDateString()}
										</span>
										<span>Payment : Pending</span>
									</p>
								</div>
							</div>
						))}
					</div>
				</div>
			)}
			<Footer />
		</div>
	);
};

export default Orders;
</file>

<file path="app/seller/page.jsx">
'use client';
import React, { useState } from 'react';
import { assets } from '@/assets/assets';
import Image from 'next/image';
import { useAppContext } from '@/context/AppContext';
import axios from 'axios';
import toast from 'react-hot-toast';
import { X } from 'lucide-react'; // Only X is needed for remove button

const AddProduct = () => {
	const { allCategories, setAllCategories, getToken } = useAppContext(); // Get setAllCategories
	const [files, setFiles] = useState([]);
	const [name, setName] = useState('');
	const [description, setDescription] = useState('');
	// Initialize categories as an empty array for new product
	const [categories, setCategories] = useState([]);
	const [price, setPrice] = useState('');
	const [offerPrice, setOfferPrice] = useState('');
	const [newCategoryName, setNewCategoryName] = useState(''); // State for new category input
	const [options, setOptions] = useState([]); // State for product options: [{ name: 'Size', values: ['S', 'M'] }]

	// Function to add a new category to the global list and select it for the product
	const handleAddNewCategory = async () => {
		const trimmedCategoryName = newCategoryName.trim();
		if (!trimmedCategoryName) {
			toast.error('Category name cannot be empty.');
			return;
		}

		// Prevent adding duplicate categories to the global list
		if (
			allCategories.some(
				cat => cat.toLowerCase() === trimmedCategoryName.toLowerCase()
			)
		) {
			toast.error('Category already exists globally.');
			setNewCategoryName('');
			return;
		}

		// Prevent adding duplicate categories to the product's selected list
		if (
			categories.some(
				cat => cat.toLowerCase() === trimmedCategoryName.toLowerCase()
			)
		) {
			toast.error('Category already selected for this product.');
			setNewCategoryName('');
			return;
		}

		try {
			const token = await getToken();
			const { data } = await axios.post(
				'/api/category/add',
				{ name: trimmedCategoryName },
				{ headers: { Authorization: `Bearer ${token}` } }
			);

			if (data.success) {
				toast.success(`Category '${trimmedCategoryName}' added.`);
				// Update global categories in AppContext
				setAllCategories(prev => [...prev, data.category.name]);
				// Select the newly added category for the product
				setCategories(prev => [...prev, data.category.name]);
				setNewCategoryName('');
			} else {
				toast.error(data.message);
			}
		} catch (err) {
			toast.error(err.message || 'Failed to add category.');
		}
	};

	// Function to remove a category from the product's selected categories
	const handleRemoveSelectedCategory = categoryToRemove => {
		setCategories(prev => prev.filter(cat => cat !== categoryToRemove));
	};

	// Function to toggle selection of an existing category from the global list
	const handleToggleExistingCategory = categoryToToggle => {
		if (categories.includes(categoryToToggle)) {
			handleRemoveSelectedCategory(categoryToToggle);
		} else {
			setCategories(prev => [...prev, categoryToToggle]);
		}
	};

	const handleSubmit = async e => {
		e.preventDefault();

		const formData = new FormData();
		formData.append('name', name);
		formData.append('description', description);
		// Join selected categories into a comma-separated string for the backend
		formData.append('categories', categories.join(','));
		formData.append('price', price);
		formData.append('offerPrice', offerPrice);
		// Append options as a JSON string
		formData.append('options', JSON.stringify(options));
		for (let i = 0; i < files.length; i++) {
			formData.append('images', files[i]);
		}

		try {
			const token = await getToken();
			const { data } = await axios.post('/api/product/add', formData, {
				headers: {
					Authorization: `Bearer ${token}`,
				},
			});
			console.log(formData);
			console.log(data);
			if (data.success) {
				toast.success(data.message);
				setFiles([]);
				setName('');
				setDescription('');
				setCategories([]); // Reset categories to empty array
				setPrice('');
				setOfferPrice('');
				setOptions([]); // Reset options to empty array
			} else {
				toast.error(data.message);
			}
		} catch (err) {
			toast.error(err.message);
		}
	};

	return (
		<div className='flex-1 min-h-screen flex flex-col justify-between'>
			<form onSubmit={handleSubmit} className='md:p-10 p-4 space-y-5 max-w-lg'>
				<div>
					<p className='text-base font-medium'>Product Image</p>
					<div className='flex flex-wrap items-center gap-3 mt-2'>
						{[...Array(4)].map((_, index) => (
							<label key={index} htmlFor={`image${index}`}>
								<input
									onChange={e => {
										const updatedFiles = [...files];
										updatedFiles[index] = e.target.files[0];
										setFiles(updatedFiles);
									}}
									type='file'
									id={`image${index}`}
									hidden
								/>
								<Image
									key={index}
									className='max-w-24 cursor-pointer'
									src={
										files[index]
											? URL.createObjectURL(files[index])
											: assets.upload_area
									}
									alt=''
									width={100}
									height={100}
								/>
							</label>
						))}
					</div>
				</div>
				<div className='flex flex-col gap-1 max-w-md'>
					<label className='text-base font-medium' htmlFor='product-name'>
						Product Name
					</label>
					<input
						id='product-name'
						type='text'
						placeholder='Type here'
						className='outline-none md:py-2.5 py-2 px-3 rounded border border-gray-500/40'
						onChange={e => setName(e.target.value)}
						value={name}
						required
					/>
				</div>
				<div className='flex flex-col gap-1 max-w-md'>
					<label
						className='text-base font-medium'
						htmlFor='product-description'
					>
						Product Description
					</label>
					<textarea
						id='product-description'
						rows={4}
						className='outline-none md:py-2.5 py-2 px-3 rounded border border-gray-500/40 resize-none'
						placeholder='Type here'
						onChange={e => setDescription(e.target.value)}
						value={description}
						required
					></textarea>
				</div>
				<div className='flex items-center gap-5 flex-wrap'>
					{/* Category Management Section */}
					<div className='flex flex-col gap-1 w-64 relative'>
						<label className='text-base font-medium'>Categories</label>
						{/* Selected Categories Tags */}
						<div className='flex flex-wrap gap-2 mb-3'>
							{categories.map(cat => (
								<span
									key={cat}
									className='flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full'
								>
									{cat}
									<button
										type='button'
										onClick={() => handleRemoveSelectedCategory(cat)}
										className='ml-1 text-blue-800 hover:text-blue-900 focus:outline-none'
									>
										&times;
									</button>
								</span>
							))}
						</div>

						{/* Add New Category Input */}
						<div className='flex gap-2 mb-3'>
							<input
								type='text'
								value={newCategoryName}
								onChange={e => setNewCategoryName(e.target.value)}
								onKeyPress={e => {
									if (e.key === 'Enter') {
										e.preventDefault(); // Prevent form submission
										handleAddNewCategory();
									}
								}}
								placeholder='Add new category'
								className='border px-3 py-2 rounded w-full'
							/>
							<button
								type='button'
								onClick={handleAddNewCategory}
								className='px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700'
							>
								Add
							</button>
						</div>

						{/* Existing Categories as Clickable Buttons */}
						<div className='flex flex-wrap gap-2'>
							{allCategories
								.filter(cat => !categories.includes(cat)) // Filter out already selected categories
								.map(cat => (
									<button
										key={cat}
										type='button'
										onClick={() => handleToggleExistingCategory(cat)}
										className='px-3 py-1 rounded-full border border-gray-300 text-gray-700 hover:bg-gray-100 text-sm'
									>
										{cat}
									</button>
								))}
						</div>
					</div>

					{/* Product Options Management Section */}
					<div className='border p-3 rounded'>
						<label className='block text-base font-medium text-gray-700 mb-2'>
							Product Options (e.g., Size, Color)
						</label>
						{options.map((option, optionIndex) => (
							<div
								key={optionIndex}
								className='flex flex-col gap-2 mb-3 p-2 border rounded'
							>
								<div className='flex items-center justify-between'>
									<input
										type='text'
										placeholder='Option Name (e.g., Size)'
										value={option.name}
										onChange={e => {
											const newOptions = [...options];
											newOptions[optionIndex].name = e.target.value;
											setOptions(newOptions);
										}}
										className='border px-3 py-2 rounded w-full mr-2'
									/>
									<button
										type='button'
										onClick={() =>
											setOptions(prev =>
												prev.filter((_, i) => i !== optionIndex)
											)
										}
										className='bg-red-600 text-white rounded px-3 py-2 hover:bg-red-700'
									>
										Remove Option
									</button>
								</div>
								<div className='flex flex-wrap gap-2 items-center'>
									{option.values.map((value, valueIndex) => (
										<span
											key={valueIndex}
											className='flex items-center bg-gray-100 text-gray-800 text-sm font-medium px-2.5 py-0.5 rounded-full'
										>
											{value}
											<button
												type='button'
												onClick={() => {
													const newOptions = [...options];
													newOptions[optionIndex].values = newOptions[
														optionIndex
													].values.filter((_, i) => i !== valueIndex);
													setOptions(newOptions);
												}}
												className='ml-1 text-gray-800 hover:text-gray-900 focus:outline-none'
											>
												&times;
											</button>
										</span>
									))}
									<input
										type='text'
										placeholder='Add value (comma-separated)'
										onKeyPress={e => {
											if (e.key === 'Enter') {
												e.preventDefault();
												const newValues = e.target.value
													.split(',')
													.map(v => v.trim())
													.filter(v => v !== '');
												if (newValues.length > 0) {
													const newOptions = [...options];
													newOptions[optionIndex].values = [
														...newOptions[optionIndex].values,
														...newValues,
													].filter(
														(v, i, a) =>
															a.findIndex(
																t => t.toLowerCase() === v.toLowerCase()
															) === i
													); // Prevent duplicates
													setOptions(newOptions);
													e.target.value = '';
												}
											}
										}}
										className='border px-3 py-2 rounded flex-grow'
									/>
								</div>
							</div>
						))}
						<button
							type='button'
							onClick={() =>
								setOptions(prev => [...prev, { name: '', values: [] }])
							}
							className='px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 mt-2'
						>
							Add New Option
						</button>
					</div>

					<div className='flex flex-col gap-1 w-32'>
						<label className='text-base font-medium' htmlFor='product-price'>
							Product Price
						</label>
						<input
							id='product-price'
							type='number'
							placeholder='0'
							className='outline-none md:py-2.5 py-2 px-3 rounded border border-gray-500/40'
							onChange={e => setPrice(e.target.value)}
							value={price}
							required
						/>
					</div>
					<div className='flex flex-col gap-1 w-32'>
						<label className='text-base font-medium' htmlFor='offer-price'>
							Offer Price
						</label>
						<input
							id='offer-price'
							type='number'
							placeholder='0'
							className='outline-none md:py-2.5 py-2 px-3 rounded border border-gray-500/40'
							onChange={e => setOfferPrice(e.target.value)}
							value={offerPrice}
							required
						/>
					</div>
				</div>
				<button
					type='submit'
					className='px-8 py-2.5 bg-main-color-600 text-white font-medium rounded'
				>
					ADD
				</button>
			</form>
			{/* <Footer /> */}
		</div>
	);
};

export default AddProduct;
</file>

<file path="app/seller/product-list/page.jsx">
'use client';
import React, { useEffect, useState } from 'react';
import { assets } from '@/assets/assets';
import Image from 'next/image';
import { useAppContext } from '@/context/AppContext';
import Footer from '@/components/seller/Footer';
import Loading from '@/components/Loading';
import axios from 'axios';
import toast from 'react-hot-toast';
import EditProductModal from '@/components/seller/EditProductModal';

const ProductList = () => {
	const { router, getToken, user } = useAppContext();
	const [products, setProducts] = useState([]);
	const [loading, setLoading] = useState(true);
	const [deletingId, setDeletingId] = useState(null);
	const [editingProduct, setEditingProduct] = useState(null);

	const fetchSellerProduct = async () => {
		try {
			const token = await getToken();
			const { data } = await axios.get('/api/product/seller-list', {
				headers: { Authorization: `Bearer ${token}` },
			});
			if (data.success) {
				setProducts(data.products);
			} else {
				toast.error(data.message);
			}
		} catch (err) {
			toast.error(err.message);
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		if (user) fetchSellerProduct();
	}, [user]);

	const handleRemove = async id => {
		if (!confirm('Are you sure you want to remove this product?')) return;

		try {
			setDeletingId(id); // start deleting
			const token = await getToken();
			const { data } = await axios.delete('/api/product/delete', {
				headers: { Authorization: `Bearer ${token}` },
				data: { productId: id }, // send productId in body
			});

			if (data.success) {
				toast.success(data.message);
				setProducts(prev => prev.filter(p => p._id !== id));
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
		} finally {
			setDeletingId(null);
		}
	};

	return (
		<div className='flex-1 min-h-screen flex flex-col justify-between'>
			{loading ? (
				<Loading />
			) : (
				<div className='w-full md:p-10 p-4'>
					<h2 className='pb-4 text-lg font-medium'>All Product</h2>
					<div className='flex flex-col items-center max-w-4xl w-full overflow-hidden rounded-md bg-white border border-gray-500/20'>
						<table className='table-fixed w-full overflow-hidden'>
							<thead className='text-gray-900 text-sm text-left'>
								<tr>
									<th className='w-2/3 md:w-2/5 px-4 py-3 font-medium truncate'>
										Product
									</th>
									<th className='px-4 py-3 font-medium truncate max-sm:hidden'>
										Categories
									</th>
									<th className='px-4 py-3 font-medium truncate'>Price</th>
									<th className='px-4 py-3 font-medium truncate max-sm:hidden'>
										Action
									</th>
								</tr>
							</thead>
							<tbody className='text-sm text-gray-500'>
								{products.map((product, index) => (
									<tr key={index} className='border-t border-gray-500/20'>
										<td className='md:px-4 pl-2 md:pl-4 py-3 flex items-center space-x-3 truncate'>
											<div className='bg-gray-500/10 rounded p-2'>
												<Image
													src={product.image[0]}
													alt='product Image'
													className='w-16'
													width={1280}
													height={720}
												/>
											</div>
											<span className='truncate w-full'>{product.name}</span>
										</td>
										<td className='px-4 py-3 max-sm:hidden'>
											{product.categories.join(', ')}
										</td>
										<td className='px-4 py-3'>${product.offerPrice}</td>
										<td className='px-4 py-3 max-sm:hidden'>
											<div className='flex items-center gap-2'>
												{/* Visit Button */}
												<button
													onClick={() => router.push(`/product/${product._id}`)}
													className='flex items-center gap-1 px-1.5 md:px-3.5 py-2 bg-main-color-600 text-white rounded-md'
												>
													<span className='hidden md:block'>Visit</span>
													<Image
														className='h-3.5'
														src={assets.redirect_icon}
														alt='redirect_icon'
													/>
												</button>

												{/* Edit Button */}
												<button
													onClick={() => setEditingProduct(product)}
													className='px-2 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700'
												>
													Edit
												</button>

												{/* Remove Button */}
												<button
													onClick={() => handleRemove(product._id)}
													disabled={deletingId === product._id}
													className={`px-2 py-2 text-white rounded-md ${
														deletingId === product._id
															? 'bg-red-400 cursor-not-allowed'
															: 'bg-red-600 hover:bg-red-700'
													}`}
												>
													{deletingId === product._id
														? 'Removing...'
														: 'Remove'}
												</button>
											</div>
										</td>
									</tr>
								))}
							</tbody>
						</table>
					</div>
				</div>
			)}

			{/* Edit Product Modal */}
			{editingProduct && (
				<EditProductModal
					product={editingProduct}
					isOpen={!!editingProduct}
					onClose={() => setEditingProduct(null)}
					getToken={getToken}
					onUpdate={updatedProduct =>
						setProducts(prev =>
							prev.map(p => (p._id === updatedProduct._id ? updatedProduct : p))
						)
					}
				/>
			)}

			<Footer />
		</div>
	);
};

export default ProductList;
</file>

<file path="context/AppContext.jsx">
'use client';
import { useAuth, useUser } from '@clerk/nextjs';
import axios from 'axios';
import { useRouter } from 'next/navigation';
import { createContext, useContext, useEffect, useState } from 'react';
import toast from 'react-hot-toast';

export const AppContext = createContext();

export const useAppContext = () => {
	return useContext(AppContext);
};

export const AppContextProvider = props => {
	const currency = process.env.NEXT_PUBLIC_CURRENCY;
	const router = useRouter();

	const { user } = useUser();
	const { getToken } = useAuth();

	const [products, setProducts] = useState([]);
	const [userData, setUserData] = useState(false);
	const [isSeller, setIsSeller] = useState(true);
	const [cartItems, setCartItems] = useState({});
	const [allCategories, setAllCategories] = useState([]);

	const fetchProductData = async () => {
		try {
			const { data } = await axios.get('/api/product/list');
			if (data.success) {
				setProducts(data.products);
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
		}
	};

	const fetchUserData = async () => {
		try {
			if (user.publicMetadata.role === 'seller') {
				setIsSeller(true);
			} else {
				setIsSeller(false);
			}
			const token = await getToken();

			const { data } = await axios.get('/api/user/data', {
				headers: { Authorization: `Bearer ${token}` },
			});

			if (data.success) {
				setUserData(data.user);
				setCartItems(data.user.cartItems);
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
			console.log(error);
		}
	};

	// Modified addToCart to accept selectedOptions
	const addToCart = async (itemId, selectedOptions = {}) => {
		let cartData = structuredClone(cartItems);
		// Create a unique key for the item in the cart based on product ID and selected options
		// This ensures different variants of the same product are treated as separate items
		const itemKey = JSON.stringify({ itemId, selectedOptions });

		if (cartData[itemKey]) {
			cartData[itemKey] += 1;
		} else {
			cartData[itemKey] = 1;
		}
		setCartItems(cartData);
		if (user) {
			try {
				const token = await getToken();
				await axios.post(
					'/api/cart/update',
					{ cartData },
					{
						headers: { Authorization: `Bearer ${token}` },
					}
				);
				toast.success('Item added to cart');
			} catch (error) {
				console.log(error);
				toast.error(error.message);
			}
		}
	};

	const updateCartQuantity = async (itemKey, quantity) => {
		let cartData = structuredClone(cartItems);
		if (quantity === 0) {
			delete cartData[itemKey];
		} else {
			cartData[itemKey] = quantity;
		}
		setCartItems(cartData);
		if (user) {
			try {
				const token = await getToken();
				await axios.post(
					'/api/cart/update',
					{ cartData },
					{
						headers: { Authorization: `Bearer ${token}` },
					}
				);
				toast.success('Cart Updated!');
			} catch (error) {
				toast.error(error.message);
			}
		}
	};

	const getCartCount = () => {
		let totalCount = 0;
		for (const itemKey in cartItems) {
			if (cartItems[itemKey] > 0) {
				totalCount += cartItems[itemKey];
			}
		}
		return totalCount;
	};

	const getCartAmount = () => {
		let totalAmount = 0;
		for (const itemKey in cartItems) {
			const { itemId } = JSON.parse(itemKey); // Extract itemId from the unique key
			let itemInfo = products.find(product => product._id === itemId);
			if (cartItems[itemKey] > 0 && itemInfo) {
				totalAmount += itemInfo.offerPrice * cartItems[itemKey];
			}
		}
		return Math.floor(totalAmount * 100) / 100;
	};

	const fetchCategories = async () => {
		try {
			const { data } = await axios.get('/api/category/list');
			if (data.success) setAllCategories(data.categories.map(c => c.name));
		} catch (err) {
			console.error(err);
		}
	};

	useEffect(() => {
		fetchCategories();
	}, []);

	useEffect(() => {
		fetchProductData();
	}, []);

	useEffect(() => {
		if (user) {
			fetchUserData();
		}
	}, [user]);

	const value = {
		user,
		getToken,
		currency,
		router,
		isSeller,
		setIsSeller,
		userData,
		fetchUserData,
		products,
		fetchProductData,
		cartItems,
		setCartItems,
		addToCart,
		updateCartQuantity,
		getCartCount,
		getCartAmount,
		allCategories,
		setAllCategories,
	};

	return (
		<AppContext.Provider value={value}>{props.children}</AppContext.Provider>
	);
};
</file>

<file path="models/Address.js">
import mongoose from 'mongoose';

const addressSchema = new mongoose.Schema({
	userId: { type: String, required: true },
	fullName: { type: String, required: true },
	phoneNumber: { type: String, required: true },
	pincode: { type: Number, required: true },
	area: { type: String, required: true },
	state: { type: String, required: true },
	city: { type: String, required: true },
});

const Address =
	mongoose.models.address || mongoose.model('address', addressSchema);

export default Address;
</file>

<file path="models/Order.js">
import mongoose from 'mongoose';

const orderSchema = new mongoose.Schema({
	userId: {
		type: String,
		ref: 'User',
		required: true,
	},
	items: [
		{
			product: {
				type: String,
				required: true,
				ref: 'product',
			},
			quantity: {
				type: Number,
				required: true,
			},
		},
	],
	amount: { type: Number, required: true },
	address: { type: String, required: true, ref: 'address' },
	status: { type: String, required: true, default: 'Order Placed' },
	date: { type: Number, required: true },
});

const Order = mongoose.models.order || mongoose.model('order', orderSchema);

export default Order;
</file>

<file path="models/User.js">
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema(
	{
		_id: { type: String, required: true },
		name: { type: String, required: true },
		email: { type: String, required: true, unique: true },
		imageUrl: { type: String, required: true },
		cartItems: { type: Object, default: {} },
	},
	{ minimize: false }
);

const User = mongoose.models.User || mongoose.model('User', userSchema);
export default User;
</file>

<file path="app/api/inngest/route.js">
import { serve } from 'inngest/next';
import {
	createUserOrder,
	inngest,
	syncUserCreation,
	syncUserDeletion,
	syncUserUpdation,
} from '@/config/inngest';

// Create an API that serves zero functions
export const { GET, POST, PUT } = serve({
	client: inngest,
	functions: [
		syncUserCreation,
		syncUserUpdation,
		syncUserDeletion,
		createUserOrder,
	],
});
</file>

<file path="components/OrderSummary.jsx">
import { useAppContext } from '@/context/AppContext';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import toast from 'react-hot-toast';

const OrderSummary = () => {
	const {
		currency,
		router,
		getCartCount,
		getCartAmount,
		getToken,
		user,
		cartItems,
		setCartItems,
	} = useAppContext();
	const [selectedAddress, setSelectedAddress] = useState(null);
	const [isDropdownOpen, setIsDropdownOpen] = useState(false);

	const [userAddresses, setUserAddresses] = useState([]);

	const fetchUserAddresses = async () => {
		try {
			console.log('work');

			const token = await getToken();
			console.log('work');

			const { data } = await axios.get('/api/user/get-address', {
				headers: { Authorization: `Bearer ${token}` },
			});
			console.log(data);
			if (data.success) {
				setUserAddresses(data.addresses || []);
				if (data.addresses.length > 0) {
					setSelectedAddress(data.addresses[0]);
				}
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
		}
	};

	const handleAddressSelect = address => {
		setSelectedAddress(address);
		setIsDropdownOpen(false);
	};

	const createOrder = async () => {
		try {
			if (!selectedAddress) {
				toast.error('Please select an address');
				return;
			}
			const token = await getToken();

			let cartItemsArray = Object.keys(cartItems).map(key => {
				return {
					product: key,
					quantity: cartItems[key],
				};
			});
			cartItemsArray = cartItemsArray.filter(item => item.quantity > 0);

			if (cartItemsArray.length === 0) {
				toast.error('Cart is empty');
				return;
			}

			const { data } = await axios.post(
				'/api/order/create',
				{
					items: cartItemsArray,
					address: selectedAddress._id,
				},
				{
					headers: { Authorization: `Bearer ${token}` },
				}
			);
			if (data.success) {
				toast.success(data.message);
				setCartItems({});
				router.push('/order-placed');
			} else {
				toast.error(data.message);
			}
		} catch (error) {
			toast.error(error.message);
		}
	};

	useEffect(() => {
		if (user) {
			fetchUserAddresses();
		}
	}, [user]);

	return (
		<div className='w-full md:w-96 bg-gray-500/5 p-5'>
			<h2 className='text-xl md:text-2xl font-medium text-gray-700'>
				Order Summary
			</h2>
			<hr className='border-gray-500/30 my-5' />
			<div className='space-y-6'>
				<div>
					<label className='text-base font-medium uppercase text-gray-600 block mb-2'>
						Select Address
					</label>
					<div className='relative inline-block w-full text-sm border'>
						<button
							className='peer w-full text-left px-4 pr-2 py-2 bg-white text-gray-700 focus:outline-none'
							onClick={() => setIsDropdownOpen(!isDropdownOpen)}
						>
							<span>
								{selectedAddress
									? `${selectedAddress.fullName}, ${selectedAddress.area}, ${selectedAddress.city}, ${selectedAddress.state}`
									: 'Select Address'}
							</span>
							<svg
								className={`w-5 h-5 inline float-right transition-transform duration-200 ${
									isDropdownOpen ? 'rotate-0' : '-rotate-90'
								}`}
								xmlns='http://www.w3.org/2000/svg'
								fill='none'
								viewBox='0 0 24 24'
								stroke='#6B7280'
							>
								<path
									strokeLinecap='round'
									strokeLinejoin='round'
									strokeWidth='2'
									d='M19 9l-7 7-7-7'
								/>
							</svg>
						</button>

						{isDropdownOpen && (
							<ul className='absolute w-full bg-white border shadow-md mt-1 z-10 py-1.5'>
								{userAddresses.map((address, index) => (
									<li
										key={index}
										className='px-4 py-2 hover:bg-gray-500/10 cursor-pointer'
										onClick={() => handleAddressSelect(address)}
									>
										{address.fullName}, {address.area}, {address.city},{' '}
										{address.state}
									</li>
								))}
								<li
									onClick={() => router.push('/add-address')}
									className='px-4 py-2 hover:bg-gray-500/10 cursor-pointer text-center'
								>
									+ Add New Address
								</li>
							</ul>
						)}
					</div>
				</div>

				<div>
					<label className='text-base font-medium uppercase text-gray-600 block mb-2'>
						Promo Code
					</label>
					<div className='flex flex-col items-start gap-3'>
						<input
							type='text'
							placeholder='Enter promo code'
							className='flex-grow w-full outline-none p-2.5 text-gray-600 border'
						/>
						<button className='bg-main-color-600 text-white px-9 py-2 hover:bg-main-color-700'>
							Apply
						</button>
					</div>
				</div>

				<hr className='border-gray-500/30 my-5' />

				<div className='space-y-4'>
					<div className='flex justify-between text-base font-medium'>
						<p className='uppercase text-gray-600'>Items {getCartCount()}</p>
						<p className='text-gray-800'>
							{currency}
							{getCartAmount()}
						</p>
					</div>
					<div className='flex justify-between'>
						<p className='text-gray-600'>Shipping Fee</p>
						<p className='font-medium text-gray-800'>Free</p>
					</div>
					<div className='flex justify-between'>
						<p className='text-gray-600'>Tax (2%)</p>
						<p className='font-medium text-gray-800'>
							{currency}
							{Math.floor(getCartAmount() * 0.02)}
						</p>
					</div>
					<div className='flex justify-between text-lg md:text-xl font-medium border-t pt-3'>
						<p>Total</p>
						<p>
							{currency}
							{getCartAmount() + Math.floor(getCartAmount() * 0.02)}
						</p>
					</div>
				</div>
			</div>

			<button
				onClick={createOrder}
				className='w-full bg-main-color-600 text-white py-3 mt-5 hover:bg-main-color-700'
			>
				Place Order
			</button>
		</div>
	);
};

export default OrderSummary;
</file>

<file path="config/inngest.js">
import { Inngest } from 'inngest';
import connectDB from './db';
import User from '@/models/User';
import Order from '@/models/Order';

// Create a client to send and receive events
export const inngest = new Inngest({ id: 'tempcommerce-next' });

// inngest function to save user data to database
export const syncUserCreation = inngest.createFunction(
	{ id: 'sync-user-from-clerk' },
	{ event: 'clerk/user.created' },
	async ({ event }) => {
		// Example: Save user data to database
		const { id, first_name, last_name, email_addresses, image_url } =
			event.data;
		const userData = {
			_id: id,
			email: email_addresses[0].email_address,
			name: first_name + ' ' + last_name,
			imageUrl: image_url,
		};
		// Replace with actual DB logic
		await connectDB();
		await User.create(userData);
	}
);

// inngest function to update user data to database
export const syncUserUpdation = inngest.createFunction(
	{ name: 'update-user-from-clerk' },
	{ event: 'clerk/user.updated' },
	async ({ event }) => {
		// Example: Save user data to database
		const { id, first_name, last_name, email_addresses, image_url } =
			event.data;
		const userData = {
			_id: id,
			email: email_addresses[0].email_address,
			name: first_name + ' ' + last_name,
			imageUrl: image_url,
		};
		// Replace with actual DB logic
		await connectDB();
		await User.findByIdAndUpdate(id, userData);
	}
);

// inngest function to delete user data to database
export const syncUserDeletion = inngest.createFunction(
	{ id: 'delete-user-from-clerk' },
	{ event: 'clerk/user.deleted' },
	async ({ event }) => {
		// Example: Save user data to database
		const { id } = event.data;
		// Replace with actual DB logic
		await connectDB();
		await User.findByIdAndDelete(id);
	}
);

// inngest function to create user's order data to database

export const createUserOrder = inngest.createFunction(
	{
		id: 'create-user-order',
		batchEvents: {
			maxSize: 5,
			timeout: '5s',
		},
	},
	{ event: 'order/created' },
	async ({ events }) => {
		const orders = events.map(event => {
			return {
				userId: event.data.userId,
				items: event.data.items,
				amount: event.data.amount,
				address: event.data.address,
				date: event.data.date,
			};
		});

		await connectDB();
		await Order.insertMany(orders);
		return {
			success: true,
			processed: orders.length,
		};
	}
);
</file>

<file path="app/api/order/create/route.js">
import connectDB from '@/config/db';
import { inngest } from '@/config/inngest';
import Product from '@/models/Product';
import User from '@/models/User';
import { getAuth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function POST(request) {
	try {
		const { userId } = getAuth(request);
		const { address, items } = await request.json();

		if (!address || items.length === 0) {
			return NextResponse.json({
				success: false,
				message: 'Invalid data',
			});
		}

		await connectDB();
		let amount = 0;

		for (const item of items) {
			const product = await Product.findById(item.product);
			amount += product.offerPrice * item.quantity;
		}

		await inngest.send({
			name: 'order/created',
			data: {
				userId,
				address,
				items,
				amount: amount + Math.floor(amount * 0.02),
				date: Date.now(),
			},
		});
		const user = await User.findById(userId);
		user.cartItems = {};
		await user.save();
		return NextResponse.json({
			success: true,
			message: 'Order placed successfully',
		});
	} catch (error) {
		console.log(error);
		return NextResponse.json({
			success: false,
			message: error.message,
		});
	}
}
</file>

</files>
